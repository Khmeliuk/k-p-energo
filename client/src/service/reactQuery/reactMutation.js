import { useMutation, useQueryClient } from "@tanstack/react-query";
import { createTask, patchStatus } from "../API/axios";

export const useAuthMutation = function (fetchfunction) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: fetchfunction,
    onSuccess: (data) => {
      queryClient.setQueryData(["user"], data);
    },
    onError: (error) => {
      console.error("Auth error:", error);
    },
  });
};

export const useCreateTask = function () {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: createTask,
    onSettled: async (data, err) => {
      if (err) {
        console.error(err);
      }
      await queryClient.invalidateQueries({ queryKey: ["tasks"] });
    },
  });
};

export const useUpdateTaskStatus = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: patchStatus,

    // ‚úÖ –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    onMutate: async ({ taskId, status }) => {
      // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è tasks
      await queryClient.cancelQueries({ queryKey: ["tasks"] });

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è rollback
      const previousTasks = queryClient.getQueryData(["tasks"]);

      // –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
      queryClient.setQueryData(["tasks"], (old) => {
        console.log(old, "–û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–æ");

        return old?.data?.tasks?.map((task) =>
          task.id === taskId ? { ...task, status } : task
        );
      });

      return { previousTasks };
    },

    // ‚úÖ –ü—Ä–∏ —É—Å–ø—ñ—Ö—É - —ñ–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à
    onSuccess: (data, variables) => {
      // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ —ñ —Ä–µ—Ñ–µ—Ç—á–∏–º–æ tasks
      // queryClient.invalidateQueries({ queryKey: ["tasks"] });

      // –ê–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∑–∞–¥–∞—á—É
      queryClient.setQueryData(["task", variables.taskId], data);

      console.log("Task updated successfully:", data);
    },

    // ‚ùå –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ - –≤—ñ–¥–∫–∞—Ç—É—î–º–æ –∑–º—ñ–Ω–∏
    onError: (error, variables, context) => {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ
      if (context?.previousTasks) {
        queryClient.setQueryData(["tasks"], context.previousTasks);
      }

      console.error("Failed to update task:", error);
    },

    // üîÑ –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è (—É—Å–ø—ñ—Ö –∞–±–æ –ø–æ–º–∏–ª–∫–∞)
    onSettled: () => {
      // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É
      queryClient.invalidateQueries({ queryKey: ["tasks"] });
    },
  });
};
